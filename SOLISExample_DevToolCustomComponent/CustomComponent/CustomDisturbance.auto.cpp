// Automatically generated by Advanced Solutions Inc. MAXDevTool 2018c
// 
// ============================================================================
// 
// A custom file header for this custom project
// 
// ============================================================================
//     
// This AutoCPP file will be overwritten with each run of the Dev Tool.


#include "CustomDisturbance.hpp"

// The Autogenerated Constructor method is called to handle known constructor tasks.
void CCustomDisturbance::AutogeneratedConstructor(void)
{
   CommonConstructor();
}

// The Autogenerated Destructor method is called from the destructor to handle known destructor tasks.
void CCustomDisturbance::AutogeneratedDestructor(void)
{
   if(m_Tlm_ptr != NULL)
   {
      delete m_Tlm_ptr;
      m_Tlm_ptr = NULL;
   }
   if(m_Parm_ptr != NULL)
   {
      delete m_Parm_ptr;
      m_Parm_ptr = NULL;
   }
   if(m_Connection_ptr != NULL)
   {
      delete m_Connection_ptr;
      m_Connection_ptr = NULL;
   }
   if(m_Data_ptr != NULL)
   {
      delete m_Data_ptr;
      m_Data_ptr = NULL;
   }
}

// The AutogeneratedInit function handles known Init tasks.
void CCustomDisturbance::AutogeneratedInit(void)
{
   memset(&m_Tlm , 0, sizeof(SCustomDisturbanceTlm));
   RegisterTlm(&m_Tlm, sizeof(SCustomDisturbanceTlm));
   if(m_Connection.FSW_Ephemeris_ptr == NULL)
   {
      LOGERROR(m_Debug) << "The Object \"" << m_InstanceName << "\" of the factory \"CustomDisturbance\" has left the mutator \"Connection_FSW_Ephemeris\" unset in the config files." << std::endl;
   }
   if(m_Connection.FSW_AttDetermination_ptr == NULL)
   {
      LOGERROR(m_Debug) << "The Object \"" << m_InstanceName << "\" of the factory \"CustomDisturbance\" has left the mutator \"Connection_FSW_AttDetermination\" unset in the config files." << std::endl;
   }
}

// This is for handing known PostInit tasks if they ever come in the future.
void CCustomDisturbance::AutogeneratedPostInit(void)
{
}

CCustomDisturbance::TFactory* CCustomDisturbance::s_Factory = NULL;

void CCustomDisturbance::CreateFactory(void)
{
   if(s_Factory == NULL)
   {
      s_Factory = new TFactory(CCUSTOMDISTURBANCE_COMPONENT);
      UserCreateFactory();
   }
}

void CCustomDisturbance::DestroyFactory(void)
{
   if(s_Factory != NULL)
   {
      delete s_Factory;
      s_Factory = NULL;
   }
}

// This is the function called from the framework to populate the Telemetry Tables.
void CCustomDisturbance::PopulateTlmTables(CFswTlmTableMgr& TableMgr)
{
   PopulateTlmMaster(TableMgr);
}

// This function handles population of a the single APID's master information
void CCustomDisturbance::PopulateTlmMaster(CFswTlmTableMgr& TableMgr)
{
   CFswTlmTableMgr::TString Mnemonic;
   CFswTlmTableMgr::TString Desc;
   UINT16 mLocalAPID;

   mLocalAPID = GetAPID();
   if (GetTlmMgr() && (mLocalAPID != CFswTlmMgrBase::s_InvalidAPID))
   {
      TableMgr.StrCat(Mnemonic, GetTlmPrefix(), "CUSTOMDISTURBANCE");
      TableMgr.StrCat(Desc, "", "CustomDisturbance Description");
      TableMgr.MasterAddEntry(mLocalAPID, Mnemonic, GetLongName(), GetGroup(), Desc, sizeof(SCustomDisturbanceTlm));
      
      PopulateTlm(TableMgr, mLocalAPID);
   }
   else
   {
      LOGERROR(m_Debug) << "TlmMgr (" << GetTlmMgr() << ") or APID (" << mLocalAPID
                        << ") not set in CCustomDisturbance." << std::endl;
   }
}

// This function handles the channel definitions within the APID.
void CCustomDisturbance::PopulateTlm(CFswTlmTableMgr& TableMgr, UINT16 mLocalAPID)
{
   CFswTlmTableMgr::TString Mnemonic;
   CFswTlmTableMgr::TString LongName;
   CFswTlmTableMgr::TString Desc;

   TableMgr.StrCat(Mnemonic, GetTlmPrefix(), "MYTORQUEX");
   TableMgr.StrCat(LongName, GetLongName(), " MyTorqueX");
   TableMgr.StrCat(Desc, "", "My custom torque vector");
   TableMgr.DetailAddEntry(mLocalAPID, Mnemonic, LongName, "N*m", OFFSET(SCustomDisturbanceTlm, MyTorque_Nm[0]), m_Tlm.MyTorque_Nm[0], Desc, "%14.6f");
   
   TableMgr.StrCat(Mnemonic, GetTlmPrefix(), "MYTORQUEY");
   TableMgr.StrCat(LongName, GetLongName(), " MyTorqueY");
   TableMgr.StrCat(Desc, "", "My custom torque vector");
   TableMgr.DetailAddEntry(mLocalAPID, Mnemonic, LongName, "N*m", OFFSET(SCustomDisturbanceTlm, MyTorque_Nm[1]), m_Tlm.MyTorque_Nm[1], Desc, "%14.6f");
   
   TableMgr.StrCat(Mnemonic, GetTlmPrefix(), "MYTORQUEZ");
   TableMgr.StrCat(LongName, GetLongName(), " MyTorqueZ");
   TableMgr.StrCat(Desc, "", "My custom torque vector");
   TableMgr.DetailAddEntry(mLocalAPID, Mnemonic, LongName, "N*m", OFFSET(SCustomDisturbanceTlm, MyTorque_Nm[2]), m_Tlm.MyTorque_Nm[2], Desc, "%14.6f");
   
}

// The mutator map is where the functions that set parameters and interfaces are associated with their config names.
E_FSW_STATUS CCustomDisturbance::PopulateMutatorMap(TMutatorMap &Map)
{
   START_MAP_FUNC_DB(CCustomDisturbance, "V_ConstantDisturbance_Nm", SetV_ConstantDisturbance_Nm, "N*m", "Just a constant torque parameter", 1, void, VECTOR);
      MAP_FUNC_DB_ARGDEFAULT("0.0 0.0 0.0");
      MAP_FUNC_DB_ARGINFO(0, "V_ConstantDisturbance_Nm", "Just a constant torque parameter", "N*m");
   END_MAP_FUNC_DB();
   START_MAP_FUNC_DB(CCustomDisturbance, "E_MyEnum", SetE_MyEnum, "none", "E_MyEnum Description", 1, void, INT32);
      MAP_FUNC_DB_ARGDEFAULT("0");
      MAP_FUNC_DB_ARGINFO(0, "E_MyEnum", "E_MyEnum Description", "none");
      MAP_FUNC_DB_ADD_ARG_ENUM_ITEM(0, "E_AAA", 0);
      MAP_FUNC_DB_ADD_ARG_ENUM_ITEM(0, "E_BBB", 1);
      MAP_FUNC_DB_ADD_ARG_ENUM_ITEM(0, "E_CCC", 2);
      MAP_FUNC_DB_TYPEOVERRIDE(0, "enum MyNamespace::EMyEnum");
   END_MAP_FUNC_DB();
   START_MAP_FUNC_DB(CCustomDisturbance, "Connection_FSW_Ephemeris", SetConnection_FSW_Ephemeris, "N/A", "A description of FSW_Ephemeris.", 1, void, const CIFFSW_Ephemeris*);
      MAP_FUNC_DB_ARGINFO(0, "FSW_Ephemeris", "A description of FSW_Ephemeris.", "N/A");
   END_MAP_FUNC_DB();
   START_MAP_FUNC_DB(CCustomDisturbance, "Connection_FSW_AttDetermination", SetConnection_FSW_AttDetermination, "N/A", "A description of FSW_AttDetermination.", 1, void, const CIFFSW_AttDetermination*);
      MAP_FUNC_DB_ARGINFO(0, "FSW_AttDetermination", "A description of FSW_AttDetermination.", "N/A");
   END_MAP_FUNC_DB();

   return CComponentBase::PopulateMutatorMap(Map);
}

// The accessor map is where the accessor functions are associated their names in the config system.
E_FSW_STATUS CCustomDisturbance::PopulateAccessorMap(TAccessorMap &Map)
{
   #ifdef INCLUDE_ALL_ACCESSORS
   START_MAP_GET_FUNC_DB(CCustomDisturbance, "V_ConstantDisturbance_Nm", GetV_ConstantDisturbance_Nm, "N*m", "Just a constant torque parameter", 1, void, VECTOR&);
      MAP_GET_FUNC_DB_ARGINFO(0, "V_ConstantDisturbance_Nm", "Just a constant torque parameter", "N*m");
   END_MAP_GET_FUNC_DB();
   #endif /* INCLUDE_ALL_ACCESSORS */
   #ifdef INCLUDE_ALL_ACCESSORS
   START_MAP_GET_FUNC_DB(CCustomDisturbance, "E_MyEnum", GetE_MyEnum, "none", "E_MyEnum Description", 1, void, INT32&);
      MAP_GET_FUNC_DB_ARGINFO(0, "E_MyEnum", "E_MyEnum Description", "none");
      MAP_GET_FUNC_DB_ADD_ARG_ENUM_ITEM(0, "E_AAA", 0);
      MAP_GET_FUNC_DB_ADD_ARG_ENUM_ITEM(0, "E_BBB", 1);
      MAP_GET_FUNC_DB_ADD_ARG_ENUM_ITEM(0, "E_CCC", 2);
      MAP_FUNC_DB_TYPEOVERRIDE(0, "enum MyNamespace::EMyEnum");
   END_MAP_GET_FUNC_DB();
   #endif /* INCLUDE_ALL_ACCESSORS */
   MAP_GET_FUNC_DB(CCustomDisturbance, "ODY_Disturbance", GetODY_Disturbance, "N/A", "",  1, void, const CIFODY_Disturbance*&);
   MAP_GET_FUNC_DB(CCustomDisturbance, "MyInterface", GetMyInterface, "N/A", "",  1, void, const CIFMyInterface*&);

   return CComponentBase::PopulateAccessorMap(Map);
}

// The function map to associate functions in the config system with their config system name
E_FSW_STATUS CCustomDisturbance::PopulateFuncMap(TFuncMap &Map)
{
   return CComponentBase::PopulateFuncMap(Map);
}

void CCustomDisturbance::WriteConfig(INT32 Id, std::ostream& Out)
{
   CComponentBase::WriteConfig(Id, Out);

   WriteAttribute(Out, "V_ConstantDisturbance_Nm", m_Parm.V_ConstantDisturbance_Nm);
   WriteAttribute(Out, "E_MyEnum", m_Parm.E_MyEnum);

}

